openapi: 3.0.3
info:
  version: 1.0.0
  title: Who am I?
  description: Rest Api description
servers:
  - url: http://localhost:8090/api/v1
  - url: https://who-am-i-t3f.herokuapp.com/api/v1
paths:
  /games:
    get:
      tags:
        - game
      description: Returns a list of available games with short info.
      operationId: findAvailableGames
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of available games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameShortInfo'
    post:
      tags:
        - game
      description: Creates game
      operationId: createGame
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
      requestBody:
        description: Model for game creation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameSize'
      responses:
        '201':
          description: Returns details about created game
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}:
    get:
      tags:
        - game
      description: Returns details about game by game id and player id
      operationId: findById
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
        '404':
          description: Returns details if game not found
          content:
            application/json:
              schema:
                type: string
    post:
      tags:
        - game
      description: Start game
      operationId: startGame
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameDetails'
  /games/{id}/players:
    post:
      tags:
        - game
      description: Enrolls(adds) user to game
      operationId: enrollToGame
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns enrolled player
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/SynchronousPlayer'
        '403':
          description: Return details if player not enrolled
          content:
            application/json:
              schema:
                type: string
  /games/{id}/characters:
    post:
      tags:
        - game
      description: Suggest character
      operationId: suggestCharacter
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Model for character suggestions
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterSuggestion'
      responses:
        '200':
          description: No response data in case successful request
        '404':
          description: Provided player id or game id not exist or incorrect
          content:
            application/json:
              schema:
                type: string
  /games/{id}/turn:
    get:
      tags:
        - game
      description: Returns data about current turn
      operationId: findTurnInfo
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about game by id
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/TurnDetails'
        '404':
          description: Provided player id or game id not exist or incorrect
          content:
            application/json:
              schema:
                type: string
  /games/{id}/question:
    post:
      tags:
        - game
      description: Ask question
      operationId: askQuestion
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Message model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: No response data in case successful request
        '404':
          description: Provided player id or game id are incorrect or player already submit question
          content:
            application/json:
              schema:
                type: string
  /games/{id}/guess:
    post:
      tags:
        - game
      description: Take guess
      operationId: submitGuess
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestBody:
        description: Message model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: No response data in case successful request
        '404':
          description: Provided player id or game id are incorrect or player already submit guess
          content:
            application/json:
              schema:
                type: string
  /games/{id}/question/answer:
    post:
      tags:
        - game
      description: Give question answer
      operationId: answerQuestion
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestParam:
        description: Question answer model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionAnswer'
      responses:
        '200':
          description: No response data in case successful request
        '404':
          description: Provided player id or game id are incorrect or player already submit answer
          content:
            application/json:
              schema:
                type: string
  /games/{id}/guess/answer:
    post:
      tags:
        - game
      description: Give guess answer
      operationId: answerGuess
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      requestParam:
        description: Guess answer model
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GuessAnswer'
      responses:
        '200':
          description: No response data in case successful request
        '404':
          description: Provided player id or game id are incorrect or player already submit answer
          content:
            application/json:
              schema:
                type: string
  /games/{id}/leave:
    delete:
      tags:
        - game
      description: Returns data about player that leave game
      operationId: leaveGame
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns details about player that leave game
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/LeaveDetails'
        '404':
          description: Provided player id or game id incorrect
          content:
            application/json:
              schema:
                type: string
  /games/all-players-count:
    get:
      tags:
        - game
      description: Returns number of player online
      operationId: getAllPlayersCount
      parameters:
        - in: header
          name: X-Player
          description: Player id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns number of player online
          content:
            application/json:
              schema:
                type: integer
  /games/{id}/history:
    get:
      tags:
        - game
      description: Returns data about current game chat history
      operationId: getGameHistory
      parameters:
        - in: path
          name: id
          description: Game id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns data about current game chat history
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/GameHistory'
        '404':
          description: Provided game id was incorrect
          content:
            application/json:
              schema:
                type: string
#  ----- Components  ----------------------------------------           
components:
  schemas:
    GameShortInfo:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        playersInGame:
          type: string
    NewGameSize:
      type: object
      properties:
        maxPlayers:
          type: integer
    GameDetails:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerWithState'
    PlayerWithState:
      type: object
      properties:
        player:
          type: object
          $ref: '#/components/schemas/SynchronousPlayer'
        answer:
          type: object
          $ref: '#/components/schemas/QuestionAnswer'
        state:
          type: object
          $ref: '#/components/schemas/PlayerState'
    SynchronousPlayer:
      type: object
      properties:
        name:
          type: string
        character:
          type: string
        id:
          type: string
    CharacterSuggestion:
      type: object
      properties:
        name:
          type: string
        character:
          type: string
    TurnDetails:
      type: object
      properties:
        currentPlayer:
          type: object
          $ref: '#/components/schemas/SynchronousPlayer'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerWithState'
    Message:
      type: object
      properties:
        message:
          type: string
    LeaveDetails:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    GameHistory:
      type: object
      properties:
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionsHistory'
        currentQuestion:
          type: object
          $ref: '#/components/schemas/QuestionsHistory'
    QuestionsHistory:
      type: object
      properties:
        player:
          type: string
        type:
          type: string
        question:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswersHistory'
    AnswersHistory:
      type: object
      properties:
        player:
          type: string
        answer:
          type: string
    #  ---- Enums section  ----------------------------------------
    QuestionAnswer:
      type: string
      enum:
        - "YES"
        - "NO"
        - "NOT_SURE"
    GuessAnswer:
      type: string
      enum:
        - "YES"
        - "NO"
    PlayerState:
      type: string
      enum:
        - "NOT_READY"
        - "READY"
        - "ASKING"
        - "ASKED"
        - "ANSWERING"
        - "ANSWERED"
        - "FINISHED"
        - "LOST"
